# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YZQJ3hZA02fR4khCDfunz6NJnIyi2Hib
"""

import cv2
import matplotlib.pyplot as plt
import numpy as np
from google.colab.patches import cv2_imshow


# Load test images
#test_image1 = cv2.imread("/content/Screenshot 2024-11-23 035512.png", cv2.IMREAD_GRAYSCALE) #testing histogram of image with only salt & ppr
test_image1 = cv2.imread("/content/Barcode.jpg", cv2.IMREAD_GRAYSCALE) #salt & ppr
test_image2 = cv2.imread("/content/01 - lol easy(1).jpg", cv2.IMREAD_GRAYSCALE) #no noise
test_image3 = cv2.imread("/content/02 - still easy.jpg", cv2.IMREAD_GRAYSCALE) #no noise, just transpositioned
test_image4 = cv2.imread("/content/03 - eda ya3am ew3a soba3ak mathazarsh(1).jpg", cv2.IMREAD_GRAYSCALE) #finger, no noise
test_image5 = cv2.imread("/content/04 - fen el nadara.jpg", cv2.IMREAD_GRAYSCALE) #blurry noise
test_image6 = cv2.imread("/content/05 - meen taffa el nour!!!.jpg", cv2.IMREAD_GRAYSCALE) #dark noise
test_image7 = cv2.imread("/content/06 - meen fata7 el nour 333eenaaayy.jpg", cv2.IMREAD_GRAYSCALE) #bright noise
test_image8 = cv2.imread("/content/07 - mal7 w felfel.jpg", cv2.IMREAD_GRAYSCALE) #salt & ppr noise
test_image9 = cv2.imread("/content/08 - compresso espresso.jpg", cv2.IMREAD_GRAYSCALE) #data loss (noise?)
test_image10 = cv2.imread("/content/09 - e3del el soora ya3ammm.jpg", cv2.IMREAD_GRAYSCALE) #cropped + misplaced
test_image11 = cv2.imread("/content/10 - wen el kontraastttt.jpg", cv2.IMREAD_GRAYSCALE) #no contrast
test_image12 = cv2.imread("/content/11 - bayza 5ales di bsara7a.jpg", cv2.IMREAD_GRAYSCALE) #freq domain

_, thresholded_image_tst1 = cv2.threshold(test_image1, 100, 255, cv2.THRESH_BINARY)
cv2_imshow(thresholded_image_tst1)

hist = cv2.calcHist([thresholded_image_tst1], [0], None, [256], [0, 256])
plt.plot(hist)
plt.title("Histogram")
plt.show()


_, thresholded_image_tst2 = cv2.threshold(test_image2, 100, 255, cv2.THRESH_BINARY)
cv2_imshow(thresholded_image_tst2)

hist = cv2.calcHist([thresholded_image_tst2], [0], None, [256], [0, 256])
plt.plot(hist)
plt.title("Histogram")
plt.show()

import numpy as np
import cv2

def detect_salt_and_pepper_noise(image, black_threshold=20, white_threshold=80):
    total_pixels = image.size
    black_pixels = np.sum(image == 0)
    white_pixels = np.sum(image == 255)

    black_ratio = black_pixels / total_pixels * 100
    white_ratio = white_pixels / total_pixels * 100

    if black_ratio > black_threshold or white_ratio < white_threshold:
        return True

    return False

test_images = [
    test_image1, test_image2, test_image3, test_image4,
    test_image5, test_image6, test_image7, test_image8,
    test_image9, test_image10, test_image11, test_image12
]

valid_images = []
results = []

for i, test_image in enumerate(test_images, start=1):
    result = detect_salt_and_pepper_noise(test_image)
    if result:
        results.append((f"Test Image {i}", True))
        valid_images.append((i, test_image))  # Store valid images for further processing
    else:
        results.append((f"Test Image {i}", False))

for image_name, is_noise in results:
    print(f"{image_name}: {'Salt-and-Pepper Noise Detected' if is_noise else 'No Salt-and-Pepper Noise Detected'}")



print("AHHH")

for i, test_image in valid_images:
    print(f"Image {i}:") #just double checking it's working
    #cv2_imshow(test_image) #works right

# notice that, only images that are on the darker side were picked to have "salt
# & ppr" noise, emphasizing the fact that the barcode is most definitely not
# bright, but rather black and thresholding will always display the barcodes
# using the correct, low threshold value. barcode will ALWAYS have value lower
# than avg intensity (if noise ain't salt & ppr, maybe thresh value of 70% of
# avg intensity is good?)

hist = cv2.calcHist([test_image6], [0], None, [256], [0, 256])
plt.plot(hist)
plt.title("Histogram")
plt.show()

cv2_imshow( test_image6)
_, thresholded_image = cv2.threshold(test_image6, 8, 255, cv2.THRESH_BINARY) #if val was 100, it says yes

# Show the result
cv2_imshow( thresholded_image)
if detect_salt_and_pepper_noise(thresholded_image):
    print("Yes")  # Salt and pepper noise detected
else:
    print("No")  # No salt and pepper noise detected

average_intensity = np.mean(test_image6)

print(f"Average Intensity: {average_intensity}")
#avg intensity is 13, our focus from the image is the barcode, which is the darkest feature in the image, thus we reduce the value
#of threshold to 8

cv2_imshow( test_image8)

_, thresholded_image = cv2.threshold(test_image8, 100, 255, cv2.THRESH_BINARY)

# Show the result
cv2_imshow( thresholded_image)
if detect_salt_and_pepper_noise(thresholded_image):
    print("Yes")  # Salt and pepper noise detected
else:
    print("No")  # No salt and pepper noise detected


average_intensity = np.mean(test_image8)

print(f"Average Intensity: {average_intensity}") #157, grayish

cv2_imshow( test_image9)

_, thresholded_image = cv2.threshold(test_image9, 100, 255, cv2.THRESH_BINARY)

# Show the result
cv2_imshow( thresholded_image)
if detect_salt_and_pepper_noise(thresholded_image):
    print("Yes")  # Salt and pepper noise detected
else:
    print("No")  # No salt and pepper noise detected


average_intensity = np.mean(test_image9)

print(f"Average Intensity: {average_intensity}") #bright, 200

cv2_imshow( test_image10)

_, thresholded_image = cv2.threshold(test_image10, 100, 255, cv2.THRESH_BINARY)

# Show the result
cv2_imshow( thresholded_image)
if detect_salt_and_pepper_noise(thresholded_image):
    print("Yes")  # Salt and pepper noise detected
else:
    print("No")  # No salt and pepper noise detected


average_intensity = np.mean(test_image10)

print(f"Average Intensity: {average_intensity}")


#avg intensity is 225, img is bright, thus the barcode we need is the only dark aspect, threshold with moderate value works

_, thresholded_image = cv2.threshold(test_image11, 100, 255, cv2.THRESH_BINARY) #not the solution, 7alaha nzawd contrast

# Show the result
#cv2_imshow( thresholded_image)
#if detect_salt_and_pepper_noise(thresholded_image):
#    print("Yes")  # Salt and pepper noise detected
#else:
#    print("No")  # No salt and pepper noise detected

hist = cv2.calcHist([test_image11], [0], None, [256], [0, 256])
plt.plot(hist)
plt.title("Histogram")
plt.show()

equalized_image = cv2.equalizeHist(test_image11)

cv2_imshow(test_image11)
cv2_imshow(equalized_image)

_, thresholded_image = cv2.threshold(equalized_image, 100, 255, cv2.THRESH_BINARY)

# Show the result
cv2_imshow( thresholded_image)
if detect_salt_and_pepper_noise(thresholded_image):
    print("Yes")  # Salt and pepper noise detected
else:
    print("No")  # No salt and pepper noise detected


average_intensity = np.mean(test_image11)

print(f"Average Intensity: {average_intensity}")

#since avg intensity is 128, meaning image is gray, we need more contrast since that
#tells us the pixels are dense around center and need to spread



def increase_contrast(image): #This is what im gonna use **********************************
    # Apply linear contrast stretching
    min_val, max_val = np.min(image), np.max(image)
    contrast_image = (image - min_val) * (255 / (max_val - min_val))
    contrast_image = np.uint8(contrast_image)  # Convert back to uint8 type

    return contrast_image

print("Check here")
wow_img = increase_contrast(test_image11)
average_intensity = np.mean(wow_img)

print(f"Average Intensity: {average_intensity}")
cv2_imshow(increase_contrast(test_image11))

'''
Plans:
calculate avg intensity of salt & ppr bool true images
carry out threshold based on that
'''

# how to detect that an image histogram is compressed at one place and that the
# image is ultimately gray? what i did is if avg intensity is somewhere between 127, it is gray and compressed

def calc_avg_intensity(image):
    return np.mean(image)

def apply_dynamic_threshold(image, avg_intensity):
    if (avg_intensity>120 and avg_intensity<130 ): #check if gray compressed (only one that causes issues with threshold is gray compressed)
      image = increase_contrast(image)
      avg_intensity = calc_avg_intensity(image)

    threshold_value = int(avg_intensity * 0.75)
    _, thresholded_image = cv2.threshold(image, threshold_value, 255, cv2.THRESH_BINARY)
    return thresholded_image

avg_int = calc_avg_intensity(test_image1)
thresh_test_image1 = apply_dynamic_threshold(test_image1, avg_int)
cv2_imshow(thresh_test_image1)
if detect_salt_and_pepper_noise(thresh_test_image1):
    print("Yes")  # Salt and pepper noise detected
else:
    print("No")  # No salt and pepper noise detected



for index, image in valid_images:
    avg_intensity = calc_avg_intensity(image)

    thresh_image = apply_dynamic_threshold(image, avg_intensity)

    # display the thresholded image
    print(f"Thresholded Image {index}",)
    cv2_imshow( thresh_image)

    # last check for salt-and-pepper noise in the thresholded image
    if detect_salt_and_pepper_noise(thresh_image):
        print(f"Test Image {index}: Yes, Salt-and-Pepper Noise Detected")
    else:
        print(f"Test Image {index}: No Salt-and-Pepper Noise Detected")

#IMPORTANT: Would adaptive thresholding be better than the dynamic thresholding i applied?

#we now detect all salt & pepper noise accurately, only flaw is frequency domain test case which should be handled

