# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YZQJ3hZA02fR4khCDfunz6NJnIyi2Hib
"""

import cv2
import matplotlib.pyplot as plt
import numpy as np
from google.colab.patches import cv2_imshow


# Load test images
#test_image1 = cv2.imread("/content/Screenshot 2024-11-23 035512.png", cv2.IMREAD_GRAYSCALE) #testing histogram of image with only salt & ppr
test_image1 = cv2.imread("/content/Barcode.jpg", cv2.IMREAD_GRAYSCALE) #salt & ppr
test_image2 = cv2.imread("/content/01 - lol easy(1).jpg", cv2.IMREAD_GRAYSCALE) #no noise
test_image3 = cv2.imread("/content/02 - still easy.jpg", cv2.IMREAD_GRAYSCALE) #no noise, just transpositioned
test_image4 = cv2.imread("/content/03 - eda ya3am ew3a soba3ak mathazarsh(1).jpg", cv2.IMREAD_GRAYSCALE) #finger, no noise
test_image5 = cv2.imread("/content/04 - fen el nadara.jpg", cv2.IMREAD_GRAYSCALE) #blurry noise
test_image6 = cv2.imread("/content/05 - meen taffa el nour!!!.jpg", cv2.IMREAD_GRAYSCALE) #dark noise
test_image7 = cv2.imread("/content/06 - meen fata7 el nour 333eenaaayy.jpg", cv2.IMREAD_GRAYSCALE) #bright noise
test_image8 = cv2.imread("/content/07 - mal7 w felfel.jpg", cv2.IMREAD_GRAYSCALE) #salt & ppr noise
test_image9 = cv2.imread("/content/08 - compresso espresso.jpg", cv2.IMREAD_GRAYSCALE) #data loss (noise?)
test_image10 = cv2.imread("/content/09 - e3del el soora ya3ammm.jpg", cv2.IMREAD_GRAYSCALE) #cropped + misplaced
test_image11 = cv2.imread("/content/10 - wen el kontraastttt.jpg", cv2.IMREAD_GRAYSCALE) #no contrast
test_image12 = cv2.imread("/content/11 - bayza 5ales di bsara7a.jpg", cv2.IMREAD_GRAYSCALE) #freq domain

_, thresholded_image_tst1 = cv2.threshold(test_image1, 100, 255, cv2.THRESH_BINARY)
cv2_imshow(thresholded_image_tst1)

hist = cv2.calcHist([thresholded_image_tst1], [0], None, [256], [0, 256])
plt.plot(hist)
plt.title("Histogram")
plt.show()


_, thresholded_image_tst2 = cv2.threshold(test_image2, 100, 255, cv2.THRESH_BINARY)
cv2_imshow(thresholded_image_tst2)

hist = cv2.calcHist([thresholded_image_tst2], [0], None, [256], [0, 256])
plt.plot(hist)
plt.title("Histogram")
plt.show()

import numpy as np
import cv2

def detect_salt_and_pepper_noise(image, black_threshold=20, white_threshold=80):
    total_pixels = image.size
    black_pixels = np.sum(image == 0)
    white_pixels = np.sum(image == 255)

    black_ratio = black_pixels / total_pixels * 100
    white_ratio = white_pixels / total_pixels * 100

    if black_ratio > black_threshold or white_ratio < white_threshold:
        return True

    return False

test_images = [
    test_image1, test_image2, test_image3, test_image4,
    test_image5, test_image6, test_image7, test_image8,
    test_image9, test_image10, test_image11, test_image12
]

results = []

for i, test_image in enumerate(test_images, start=1):
    result = detect_salt_and_pepper_noise(test_image)
    results.append((f"Test Image {i}", result))

for image_name, is_noise in results:
    print(f"{image_name}: {'Salt-and-Pepper Noise Detected' if is_noise else 'No Salt-and-Pepper Noise Detected'}")

cv2_imshow( test_image6)
_, thresholded_image = cv2.threshold(test_image6, 10, 255, cv2.THRESH_BINARY) #if val was 100, it says yes

# Show the result
cv2_imshow( thresholded_image)
if detect_salt_and_pepper_noise(thresholded_image):
    print("Yes")  # Salt and pepper noise detected
else:
    print("No")  # No salt and pepper noise detected

_, thresholded_image = cv2.threshold(test_image8, 100, 255, cv2.THRESH_BINARY)

# Show the result
cv2_imshow( thresholded_image)
if detect_salt_and_pepper_noise(thresholded_image):
    print("Yes")  # Salt and pepper noise detected
else:
    print("No")  # No salt and pepper noise detected

_, thresholded_image = cv2.threshold(test_image9, 100, 255, cv2.THRESH_BINARY)

# Show the result
cv2_imshow( thresholded_image)
if detect_salt_and_pepper_noise(thresholded_image):
    print("Yes")  # Salt and pepper noise detected
else:
    print("No")  # No salt and pepper noise detected

_, thresholded_image = cv2.threshold(test_image10, 100, 255, cv2.THRESH_BINARY)

# Show the result
cv2_imshow( thresholded_image)
if detect_salt_and_pepper_noise(thresholded_image):
    print("Yes")  # Salt and pepper noise detected
else:
    print("No")  # No salt and pepper noise detected

_, thresholded_image = cv2.threshold(test_image11, 100, 255, cv2.THRESH_BINARY) #not the solution, 7alaha nzawd contrast

# Show the result
#cv2_imshow( thresholded_image)
#if detect_salt_and_pepper_noise(thresholded_image):
#    print("Yes")  # Salt and pepper noise detected
#else:
#    print("No")  # No salt and pepper noise detected

hist = cv2.calcHist([test_image11], [0], None, [256], [0, 256])
plt.plot(hist)
plt.title("Histogram")
plt.show()

equalized_image = cv2.equalizeHist(test_image11)

cv2_imshow(test_image11)
cv2_imshow(equalized_image)

_, thresholded_image = cv2.threshold(equalized_image, 100, 255, cv2.THRESH_BINARY)

# Show the result
cv2_imshow( thresholded_image)
if detect_salt_and_pepper_noise(thresholded_image):
    print("Yes")  # Salt and pepper noise detected
else:
    print("No")  # No salt and pepper noise detected

