# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yJS3rNoFHpPeNQ1I6QWZGUYzvqvpWVSl
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

#Applying different filters and checking output then applying threshold on median filter

img = cv2.imread(
    "/content/Barcode.jpg", 0)

kernel = np.array([[0, 1, 0],
                   [0, 1, 0],
                   [0, 1, 0]],
                  np.uint8)
print("initial img")
cv2_imshow(img)
median_filt = cv2.medianBlur(img, 3)
print("median filter")
cv2_imshow(median_filt) #worst barcode edges

gaussian_filt = cv2.GaussianBlur(img, (5, 5), 0)
print("gaussian filter")
cv2_imshow(gaussian_filt) #good barcode edges

bilateral_filt = cv2.bilateralFilter(img, d=9, sigmaColor=75, sigmaSpace=75)
print("bilateral filter")
cv2_imshow(bilateral_filt) #best edge maintenance for barcode

_, binary_gaus = cv2.threshold(gaussian_filt, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
print("Threshold for gaussian filter")
cv2_imshow(binary) #gaussian has worst threshold

_, binary_bilat = cv2.threshold(bilateral_filt, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
print("Threshold for bilateral filter")
cv2_imshow(binary)

_, binary_med = cv2.threshold(median_filt, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
print("Threshold for median filter")
cv2_imshow(binary)

#applying dilation and erosion to the median filtered img

kernelDil = np.array([[0, 1, 0],
                   [0, 1, 0],
                   [0, 1, 0]],
                  np.uint8)

kernelEro = np.array([[0, 1, 0],
                   [0, 1, 0],
                   [0, 1, 0],
                   [0, 1, 0]],
                  np.uint8)

#dilate the binary median img to further remove pepper noise
dilate_img = cv2.dilate(binary_med, kernelDil, iterations=1)
print("median thresholded dilated img ")
cv2_imshow( dilate_img) #not bad

op = cv2.bitwise_and(dilate_img, gaussian_filt)
print("median filt thresholded dilated img AND with gaussain filter img ")
cv2_imshow(op)

_, binary = cv2.threshold(op, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
print("threshold for the AND operation output (good)")
cv2_imshow(binary) #good

erode_img = cv2.erode(dilate_img, kernelEro, iterations=1)
print("Erode dilated img") #to close the gaps in the barcode
cv2_imshow(erode_img)

#trying on the bilateral filter
import cv2
import numpy as np


img = cv2.imread('/content/Barcode.jpg', cv2.IMREAD_GRAYSCALE)

bilateral_filt = cv2.bilateralFilter(img, d=9, sigmaColor=75, sigmaSpace=75)

_, thresh_img = cv2.threshold(bilateral_filt, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

kernel = np.array([[0, 1, 0],
                   [0, 1, 0],
                   [0, 1, 0]],
                  np.uint8)
dilated_img = cv2.dilate(thresh_img, kernel, iterations=1)
eroded_img = cv2.erode(dilated_img, kernel, iterations=1)

from google.colab.patches import cv2_imshow
print("initial img")
cv2_imshow(img)
print("bilateral filter")
cv2_imshow(bilateral_filt)
print("threshold for bilateral filter")
cv2_imshow(thresh_img)
print("dilated threshold img")
cv2_imshow(dilated_img)
print("OR between dilated and threshold")
threshOrDil = cv2.bitwise_or(thresh_img,dilated_img)
cv2_imshow(threshOrDil)
print("eroded img (good)")
eroded_img =cv2.erode(threshOrDil, kernel, iterations=1)
print("erode the OR operation")
cv2_imshow(eroded_img)

vertical_kernel = np.array([[1], [1], [1]], np.uint8)

print("Best output so far but some noise, eroding using vertical struct element")
cv2_imshow(cv2.erode(threshOrDil, vertical_kernel, iterations=2))

kernelDil = np.array([[0, 1, 0],
                   [0, 1, 0],
                   [0, 1, 0]],
                  np.uint8)

kernelDil2 = np.array([[0, 0, 0],
                   [0, 0, 0],
                   [0, 0, 0]],
                  np.uint8)

dilate_img = cv2.dilate(binary, kernelDil, iterations=1)
cv2_imshow( dilate_img) #not bad

cv2_imshow( cv2.dilate(binary, kernelDil2, iterations=1)) #not bad

import cv2
import numpy as np

img = cv2.imread('/content/Barcode.jpg', cv2.IMREAD_GRAYSCALE)


bilateral_filt = cv2.bilateralFilter(img, d=9, sigmaColor=75, sigmaSpace=75)

from google.colab.patches import cv2_imshow


cv2_imshow(bilateral_filt)

dil = cv2.dilate(binary, kernelDil, iterations=2)
cv2_imshow(dil)
cv2_imshow(cv2.erode(dil, kernelEro, iterations=4))

_, binary = cv2.threshold(bilateral_filt, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
cv2_imshow(binary)
median = cv2.medianBlur(binary, 3)
cv2_imshow(median) #good result
dil = cv2.dilate(median, kernelDil, iterations=2) # not bad
cv2_imshow(dil)
cv2_imshow(cv2.erode(dil, kernelEro, iterations=2)) #not bad

